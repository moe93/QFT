% Optimal TSR generator
%
%   AUTHOR  : Mohammad Odeh
%   DATE    : Aug. 16th, 2023
%
% CHANGELOG :
%   Aug. 16th, 2023
%       - Initial script
%

%% Setup environment
clear all; close all; clc;
set( groot, 'defaultLineLineWidth', 1.5 );	% Set default line width of plots
set( 0, 'DefaultAxesFontSize', 12 );        % Set a default axes font size

% Change default interpreter (affects text, labels, etc...)
set( 0, 'DefaultTextInterpreter', 'latex' );
set( 0, 'DefaultLegendInterpreter', 'latex' );
set( 0, 'DefaultAxesTickLabelInterpreter', 'latex' );

format compact;
fontsize = 12;

%% Flags/Constants

% --- Figure counter
CNTR = 1;                                   % Figure handle counter

% --- Enable/disable plotting figures
PLOT = true;                                %#ok<NASGU> If true, plot figures!
% PLOT = false;                               % COMMENT OUT TO PRINT FIGURES

% --- Enable/disable printing figures
PRNT = true;                                %#ok<NASGU>
% PRNT = false;                               % COMMENT OUT TO PRINT FIGURES

% --- [INFO] Strings
ACK = 'COMPLETED\n\n';

% --- Plot line color/style
c_line = [ 'r', 'g', 'b', 'c', 'm', 'k' ];
C_line = [ c_line, c_line, c_line, c_line ];
C_line = [ C_line, C_line, C_line, C_line ];

%% Read data

data_dir    = './data/';
name_mdl    = 'HySES_CpCtCq_TSR_Regime2.mat';
data  = load( [data_dir name_mdl ] );

% --- Extract matrices from the one, big ABCD matrix
Cp  = data.Cp_HySES ;
Ct  = data.Ct_HySES ;
Cq  = data.Cq_HySES ;
TSR = data.TSR_HySES;

%% Get optimum TSR

% --- Wind speeds used in simulation during data generation
V_wind      = 3.50 : 0.25 : 12.50;           % [m/s]
R_turbine   = 121.43;                       % [ m ]

% --- optSR obtained from simulations
optTSR = [ 7.26677, ...
           8.47783, ...
           7.94791, ...
           7.48041, ...
           7.06483, ...
           8.03152, ...
           7.62994, ...
           7.26661, ...
           8.09233, ...
           7.74049, ...
           7.41797, ...
           8.13855, ...
           7.82553, ...
           7.53569, ...
           7.26656, ...
           7.89295, ...
           7.62985, ...
           7.38372, ...
           7.94757, ...
           7.70674, ...
           7.48007, ...
           7.99299, ...
           7.77096, ...
           7.56094, ...
           7.36196, ...
           7.82533, ...
           7.62967, ...
           7.44358, ...
           7.87188, ...
           7.68882, ...
           7.51407, ...
           7.91225, ...
           7.74025, ...
           7.57556, ...
           7.41774, ...
           7.78538, ...
           7.62967 ];
% optTSR = [ 7.26677, ...
%            7.94791, ...
%            7.06483, ...
%            7.62994, ...
%            8.09233, ...
%            7.41797, ...
%            7.82553, ...
%            7.26656, ...
%            7.62985, ...
%            7.94757, ...
%            7.48007, ...
%            7.77096, ...
%            7.36196, ...
%            7.62967, ...
%            7.87188, ...
%            7.51407, ...
%            7.74025, ...
%            7.41774, ...
%            7.62967 ];

% --- Optimum omega for corresponding V_wind
optOmega = optTSR.*(V_wind/R_turbine);
optRPM   = optOmega .* (30/pi);

% % --- Plot and visualize data
% figure( CNTR ); CNTR = CNTR + 1;
% plot( V_wind, optTSR ); grid on; hold on;
% plot( V_wind(1:2:end), optTSR(1:2:end), '--' );
% make_nice_plot();

%% Generate best fit curve

[p, S] = polyfit( V_wind, optTSR, 12 );

% --- Test fitted polynomial
V_wind_fine = linspace( V_wind(1), V_wind(end), 101 );
estimateTSR = polyval( p, V_wind_fine );

% --- Plot
figure( CNTR ); CNTR = CNTR + 1;
plot( V_wind     , optTSR      ); hold on; grid on;
plot( V_wind_fine, estimateTSR ); make_nice_plot();
